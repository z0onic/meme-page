{"version":3,"sources":["ColorPicker.js","arrow-cross.svg","Transform.js","MemeWordControl.js","MemeWord.js","MemeBuild.js","MemeGroup.js","MemePage.js","Header.js","reportWebVitals.js","index.js"],"names":["ColorPicker","props","hex","checkedColor","stroke","fill","className","wheelDiameter","wheelThickness","handleDiameter","wheelReflectsSaturation","onChange","setControls","prev","map","d","i","name","type","value","checked","checkedStroke","setCheckedColor","Transform","src","cross","alt","onClick","active","MemeWordControl","React","useState","colorPickActive","setColorPickActive","handleChange","class","min","max","fsize","replace","e","target","style","background","borderColor","MemeWord","x","y","pos","setPos","mouseDown","setMouseDown","color","fontSize","WebkitTextStrokeColor","transform","border","onMouseMove","preventDefault","movementX","movementY","onMouseLeave","MemeBuild","activeMove","controls","controlCount","setControlCount","useEffect","window","addEventListener","defaultWord","length","concat","slice","controlGroup","data","wordGroup","indexOf","id","currentImg","handleSubmit","domtoimage","toJpeg","document","querySelector","quality","then","dataUrl","link","createElement","download","href","click","scrollTo","top","Images","size","url","handleClick","MemeGroup","images","allImg","MemePage","setCurrentImg","setAllImg","fetch","response","json","memes","randomNum","Math","floor","random","randomImg","behavior","Header","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ad23d530.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReinventedColorWheel from 'reinvented-color-wheel/react'\r\nimport \"reinvented-color-wheel/css/reinvented-color-wheel.min.css\"\r\n\r\nfunction ColorPicker(props) {\r\n    const hex = props.checkedColor ? props.stroke : props.fill \r\n    // const hex = props.hex\r\n    return (\r\n        <div className=\"color-picker-container\">\r\n            <ReinventedColorWheel\r\n                hex={hex}\r\n                wheelDiameter={200}\r\n                wheelThickness={20}\r\n                handleDiameter={16}\r\n                wheelReflectsSaturation={false}\r\n                // eslint-disable-next-line eqeqeq\r\n                onChange={({hex}) => props.setControls(prev => prev.map((d, i) => props.name == i ? !props.checkedColor ? {...d, fill: hex} : {...d, stroke: hex} : d))}\r\n            />\r\n            <div className=\"stroke-switch\">\r\n                <label>Stroke Active</label>\r\n                <input \r\n                    type=\"checkbox\" \r\n                    value=\"stroke-on\" \r\n                    checked={props.checkedStroke} \r\n                    // eslint-disable-next-line eqeqeq\r\n                    onChange={() => props.setControls(prev => prev.map((d, i) => props.name == i ? {...d, checkedStroke: !props.checkedStroke} : d))}></input>\r\n                <label>Stroke Color</label>\r\n                <input type=\"checkbox\" className=\"stroke-check\" value=\"stroke-color\" checked={props.checkedColor} onChange={() => props.setCheckedColor(!props.checkedColor)}></input>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ColorPicker","export default __webpack_public_path__ + \"static/media/arrow-cross.5e534d47.svg\";","import React from 'react'\r\nimport cross from \"./arrow-cross.svg\"\r\n\r\n//this will be a button that on pressing will allow the user to adjust the position of the MemeWord corresponding to the MemeWordController\r\n\r\nfunction Transform(props) {\r\n    return (\r\n        <div className=\"transformer\">\r\n            <img \r\n                src={cross} \r\n                alt=\"arrow-cross\" \r\n                className=\"arrow-cross\" \r\n                // eslint-disable-next-line eqeqeq\r\n                onClick={() => props.setControls(prev => prev.map((d, i) => props.name == i ? {...d, active: d.active ? false : true} : d))}\r\n            >\r\n            </img>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Transform","import React from 'react'\r\nimport ColorPicker from './ColorPicker'\r\nimport Transform from './Transform'\r\n\r\nfunction MemeWordControl(props) {\r\n    const [colorPickActive, setColorPickActive] = React.useState(false)\r\n    const [checkedColor, setCheckedColor] = React.useState(false)\r\n\r\n    // React.useEffect(() => {\r\n    //     window.addEventListener('click', clickEvent)\r\n    //     return () => window.removeEventListener('click', clickEvent)\r\n    // }, [])\r\n\r\n    const handleClick = e => {\r\n        setColorPickActive(prev => !prev)\r\n    }\r\n    \r\n    // const clickEvent = e => {\r\n    //     let colorSwitch = document.querySelector('.color-button')\r\n    //     if(!colorSwitch.contains(e.target)) {\r\n    //         setColorPickActive(false)\r\n    //     }\r\n    // }\r\n\r\n    const handleFontChange = e => {\r\n        const {value} = e.target\r\n        props.setControls(prev => {\r\n            // eslint-disable-next-line eqeqeq\r\n           return prev.map((d, i) => i == props.name ? value <= 100 ? {...d, fsize: `${value}px`} : d : d)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"meme-word-control\">\r\n            <input\r\n                className=\"meme-input\"\r\n                name={props.name}\r\n                type=\"text\"\r\n                value={props.value}\r\n                onChange={props.handleChange}\r\n            />\r\n            {/* <label htmlFor=\"font-size\">Font</label> */}\r\n            <div className=\"controls\">\r\n                <input type=\"number\" class=\"font-size\" min=\"25\" max=\"100\" value={props.fsize.replace(\"px\", \"\")} onChange={handleFontChange}/>\r\n                <div \r\n                    className=\"color-button\"\r\n                    name={props.name}\r\n                    onClick={handleClick}\r\n                    style={{background: props.fill, borderColor: props.stroke}}\r\n                ></div>\r\n                    {colorPickActive === true ? <ColorPicker \r\n                                            name={props.name}\r\n                                            fill={props.fill}\r\n                                            stroke={props.stroke}\r\n                                            setControls={props.setControls} \r\n                                            checkedColor={checkedColor}\r\n                                            setCheckedColor={setCheckedColor}\r\n                                            checkedStroke={props.checkedStroke}\r\n                                        /> : null}\r\n                <Transform \r\n                    name={props.name}\r\n                    setControls={props.setControls}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MemeWordControl","import React from 'react'\r\n\r\nfunction MemeWord(props) {\r\n    const [pos, setPos] = React.useState({x: 0, y: 0})\r\n    const [mouseDown, setMouseDown] = React.useState(false)\r\n\r\n    const onMouseMove = e => {\r\n        e.preventDefault()\r\n        if(mouseDown) {    \r\n            setPos({\r\n                x: pos.x + e.movementX,\r\n                y: pos.y + e.movementY\r\n            })\r\n        }\r\n    }\r\n\r\n    const onClick = () => {\r\n        if(props.active) {\r\n            setMouseDown(!mouseDown)\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <h2  \r\n            style={\r\n                {\r\n                    color : props.fill,\r\n                    fontSize: props.fsize,\r\n                    WebkitTextStrokeColor: props.checkedStroke ? props.stroke : 'rgba(0, 0, 0, 0)',\r\n                    transform: `translate(${pos.x}px, ${pos.y}px)`,\r\n                    border: props.active ? '2px dashed white' : 'none'\r\n                }\r\n            }\r\n            onClick={onClick}\r\n            onMouseMove={onMouseMove }\r\n            onMouseLeave={ () => setMouseDown(false) }\r\n        >\r\n            {props.value}\r\n        </h2>\r\n    )\r\n}\r\n\r\nexport default MemeWord","import React from 'react'\r\nimport MemeWordControl from './MemeWordControl'\r\nimport MemeWord from './MemeWord'\r\nimport domtoimage from 'dom-to-image'\r\n\r\n//each MemeWord will inherit text content and color from a MemeWordController\r\n//This MemeBuild function will contain all the state for any component associated with users making a meme\r\n\r\nfunction MemeBuild(props) {\r\n    const [controls, setControls] = React.useState([\r\n        {\r\n            value: 'text',\r\n            fill: '#FFFFFF',\r\n            stroke: '#000000',\r\n            fsize: \"35px\",\r\n            activeMove: false,\r\n            checkedStroke: true\r\n        }\r\n    ])\r\n    const [controlCount, setControlCount] = React.useState(2)\r\n\r\n    React.useEffect(() => {\r\n        window.addEventListener('click', e => {})\r\n    }, [])\r\n\r\n    React.useEffect( () => {\r\n        const defaultWord = {\r\n            value: 'text',\r\n            fill: '#FFFFFF',\r\n            stroke: '#000000',\r\n            fsize: \"35px\",\r\n            activeMove: 'false',\r\n            checkedStroke: true\r\n        }\r\n        setControls(prev => controlCount >= prev.length ? prev.concat(defaultWord) : prev.slice(0, -1))\r\n    }, [controlCount])\r\n\r\n    const handleChange = e => {\r\n        let {name, value} = e.target\r\n        setControls(prev => {\r\n            // eslint-disable-next-line eqeqeq\r\n            return prev.map((d, i) => i == name ? {...d, value: value} : d)\r\n        })\r\n    }\r\n\r\n    const handleIncrease = e => {\r\n        e.preventDefault()\r\n        setControlCount(prev => prev + 1)\r\n    }\r\n\r\n    const handleDecrease = e => {\r\n        e.preventDefault()\r\n        setControlCount(prev => prev > 0 ? prev - 1 : 0)\r\n    }\r\n\r\n    const handleSave = e => {\r\n        e.preventDefault()\r\n        domtoimage.toJpeg(document.querySelector('.meme'), { quality: 0.95 })\r\n            .then(function (dataUrl) {\r\n                var link = document.createElement('a')\r\n                link.download = 'meme.jpeg'\r\n                link.href = dataUrl\r\n                link.click()\r\n        })\r\n        window.scrollTo({top: 0})\r\n    }\r\n\r\n    const controlGroup = controls.map((data, i) => {\r\n        return (\r\n            <MemeWordControl \r\n                key={i}\r\n                name={i}\r\n                value={data.value}\r\n                fill={data.fill}\r\n                stroke={data.stroke}\r\n                fsize={data.fsize}\r\n                activeMove={data.activeMove}\r\n                checkedStroke={data.checkedStroke}\r\n                setControls={setControls}\r\n                handleChange={handleChange}\r\n            />\r\n        )\r\n    })\r\n\r\n    const wordGroup = controls.map((data) => {\r\n        return (\r\n            <MemeWord \r\n                key={controls.indexOf(data)}\r\n                name={controls.indexOf(data)}\r\n                value={data.value}\r\n                fill={data.fill}\r\n                stroke={data.stroke}\r\n                fsize={data.fsize}\r\n                active={data.active}\r\n                checkedStroke={data.checkedStroke}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div id=\"meme-builder\">\r\n            <div className=\"meme\">\r\n                <img className=\"img\" src={props.currentImg} alt=\"\" />\r\n                <div className=\"words\">\r\n                    {wordGroup}\r\n                </div>\r\n            </div>\r\n            <div className=\"image-buttons\">\r\n                <button onClick={props.handleSubmit}>Random</button>\r\n                <button onClick={handleSave}>Save</button>\r\n            </div>\r\n            <form className=\"meme-form\">\r\n                {controlGroup}\r\n            </form>\r\n            <div className=\"up-down-container\">\r\n                <button onClick={handleIncrease}>+</button>\r\n                <button onClick={handleDecrease}>-</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MemeBuild","import React from 'react'\r\n\r\n//this is the group of top 100 memes from img filp that are availbale to use. If you click it will populate the image part of MemeBuild\r\n\r\nfunction Images(props) {\r\n    return (\r\n        <img \r\n            className={props.size} \r\n            src={props.url} \r\n            alt={props.name}\r\n            onClick={props.handleClick}\r\n        >\r\n        </img>\r\n    )\r\n}\r\n\r\nfunction MemeGroup(props) {\r\n\r\n    const images = props.allImg.map((data) => {\r\n        return (\r\n            <Images \r\n                url={data.url} \r\n                key={data.id} \r\n                name={data.name}\r\n                handleClick={props.handleClick}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"meme-group\">\r\n            {images}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MemeGroup","import React from 'react'\nimport MemeBuild from './MemeBuild'\nimport MemeGroup from './MemeGroup'\n\n//things to think about adding:\n//  make sure page is looking sleek\n//  make sure page is responsive to different screens\n//  be able to change the font size\n//  be able to change font style\n//  be able to use lower case \n//  button for copy meme to clip board\n//  button to save meme as jpeg\n//  user draw on meme\n//  user upload their own image\n//  layer images\n//  transform layers\n\n//this is the top lvl of the content section of the page. Should only have two chil components but\n//each of those need access to the api fetched here\n\nfunction MemePage() {\n  const [currentImg, setCurrentImg] = React.useState(\"https://i.imgflip.com/1bgw.jpg\")\n  const [allImg, setAllImg] = React.useState([])\n\n  React.useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then(response => response.json())\n      .then(response => {\n        const {memes} = response.data\n        setAllImg(memes)\n      })\n  }, [])\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const randomNum = Math.floor(Math.random() * allImg.length)\n    const randomImg = allImg[randomNum].url\n    setCurrentImg(randomImg)\n    window.scrollTo({top: 0})\n  }\n\n  const handleClick = (e) => {\n    setCurrentImg(e.target.src)\n    window.scrollTo({top: 0, behavior: 'smooth'})\n\n  }\n\n  return (\n    <div className=\"content\"> \n      <MemeBuild currentImg={currentImg} handleSubmit={handleSubmit} />\n      <MemeGroup allImg={allImg} handleClick={handleClick} />\n    </div>\n  )\n}\n\nexport default MemePage;\n","import React from 'react'\r\n\r\nfunction Header () {\r\n    return (\r\n        <div className=\"header-group\">\r\n            <h1 className=\"header-title\">Simple Meme Generator</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MemePage from './MemePage';\nimport Header from './Header'\nimport './MemePageStyle.css'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <MemePage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}